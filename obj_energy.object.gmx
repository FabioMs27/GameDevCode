<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_energy</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>hsp = 0;
vsp = 0;

movespeed = 3;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Input 
scr_input();


//Movement
h_move = key_right + key_left;
v_move = key_up + key_down;

hsp = h_move * movespeed;
vsp = v_move * movespeed;

//Horizontal Colision
if (place_meeting(x+hsp,y,obj_wall))
{
    while (!place_meeting(x+sign(hsp),y,obj_wall))
    {
        x += sign(hsp);
    }
    hsp = 0;
}

x+=hsp;

//Vertical Colision
if (place_meeting(x,y+vsp,obj_wall))
{
    while (!place_meeting(x,y+sign(vsp),obj_wall))
    {
        y += sign(vsp);
    }
    vsp = 0;
}

y+=vsp;

move_wrap(true,false,sprite_width);


//Telleport

if (keyboard_check_released(vk_shift) or obj_player.energy &lt;= 0)
{
    //Horizontal
    if (place_meeting(x-16,y,obj_wall))
    {
        
        
            //Vertical
        if(place_meeting(x,y-32,obj_wall))
        {
            obj_player.y = y + 32;
            obj_player.x = x + 40;
            hsp = 0;
            vsp = 0;
            with (obj_player)state = state.normal;
            instance_destroy();
            
        }
        else if (place_meeting(x,y+32,obj_wall))
        {
            obj_player.y = y - 32;
            obj_player.x = x + 40;
            hsp = 0;
            vsp = 0;
            with (obj_player)state = state.normal;
            instance_destroy();
        }
        else
        {
            obj_player.y = y;
            obj_player.x = x + 40;
            hsp = 0;
            vsp = 0;
            with (obj_player)state = state.normal;
            instance_destroy();
            
        }
    }
    else if (place_meeting(x+16,y,obj_wall))
    {
            //Vertical
        if(place_meeting(x,y-32,obj_wall))
        {
            obj_player.y = y + 32;
            obj_player.x = x - 40;
            hsp = 0;
            vsp = 0;
            with (obj_player)state = state.normal;
            instance_destroy();
            
        }
        else if (place_meeting(x,y+32,obj_wall))
        {
            obj_player.y = y - 32;
            obj_player.x = x - 40;
            hsp = 0;
            vsp = 0;
            with (obj_player)state = state.normal;
            instance_destroy();
        }
        else
        {
            obj_player.y = y;
            obj_player.x = x - 40;
            hsp = 0;
            vsp = 0;
            with (obj_player)state = state.normal;
            instance_destroy();
            
        }
    }
    else
    {
            //Vertical
        if(place_meeting(x,y-32,obj_wall))
        {
            obj_player.y = y + 32;
            obj_player.x = x;
            hsp = 0;
            vsp = 0;
            with (obj_player)state = state.normal;
            instance_destroy();
            
        }
        else if (place_meeting(x,y+32,obj_wall))
        {
            obj_player.y = y - 32;
            obj_player.x = x;
            hsp = 0;
            vsp = 0;
            with (obj_player)state = state.normal;
            instance_destroy();
        }
        else
        {
            obj_player.y = y;
            obj_player.x = x;
            hsp = 0;
            vsp = 0;
            with (obj_player)state = state.normal;
            instance_destroy();
            
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
